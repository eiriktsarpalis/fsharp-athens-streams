<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Library</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.CloudFile.StoreId">
<summary>
 Cloud service unique identifier
</summary>
</member>
<member name="P:Nessos.MBrace.CloudFile.Path">
<summary>
 Full path to cloud file.
</summary>
</member>
<member name="P:Nessos.MBrace.CloudFile.FileName">
<summary>
 File name
</summary>
</member>
<member name="P:Nessos.MBrace.CloudFile.DirectoryName">
<summary>
 Path of containing folder
</summary>
</member>
<member name="M:Nessos.MBrace.CloudFile.WriteLines(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes a sequence of lines to a given CloudFile path.
 </summary>
 <param name="lines">Lines to be written.</param>
 <param name="encoding">Text encoding.</param>
 <param name="path">Path to CloudFile.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.WriteAllText(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes string contents to given CloudFile.
 </summary>
 <param name="text">Input text.</param>
 <param name="encoding">Output encoding.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.WriteAllBytes(System.Byte[],Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Write buffer contents to CloudFile.
 </summary>
 <param name="buffer">Source buffer.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.ReadLines(Nessos.MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a CloudFile as a sequence of lines.
 </summary>
 <param name="file">Input CloudFile.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.ReadAllText(Nessos.MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input CloudFile.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.ReadAllBytes(Nessos.MBrace.CloudFile)">
 <summary>
     Dump the contents of given CloudFile as byte[].
 </summary>
 <param name="file">Input CloudFile.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.Read``1(Nessos.MBrace.CloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary> 
     Read the contents of a CloudFile using the given deserialize/reader function.
 </summary>
 <param name="cloudFile">CloudFile to read.</param>
 <param name="deserializer">Function that reads data from the underlying stream.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.Read``1(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>
     Reads the contents of provided cloud file using provided deserializer.
 </summary>
 <param name="file">cloud file to be read.</param>
 <param name="deserializer">deserializing function.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.New(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},System.String,System.String)">
 <summary> 
     Create a new file in the storage with the specified folder and name.
     Use the serialize function to write to the underlying stream.
 </summary>
 <param name="serializer">Function that will write data on the underlying stream.</param>
 <param name="path">Target uri for given cloud file. Defaults to runtime-assigned path.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.New(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary> 
     Create a new file in the storage with the specified folder and name.
     Use the serialize function to write to the underlying stream.
 </summary>
 <param name="serializer">Function that will write data on the underlying stream.</param>
 <param name="path">Target uri for given cloud file. Defaults to runtime-assigned path.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.GetSizeAsync">
<summary>
 Returns the file size in bytes
</summary>
</member>
<member name="M:Nessos.MBrace.CloudFile.FromPath(System.String)">
 <summary>
     Returns an existing cloud file instance from provided path.
 </summary>
 <param name="path">Input path to cloud file.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.Enumerate(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary> 
     Returns all files in given directory as CloudFiles.
 </summary>
 <param name="directory">Directory to enumerate. Defaults to execution context.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.CloudFile.CopyToStream(System.IO.Stream)">
 <summary>
     Copy file contents to local stream.
 </summary>
 <param name="target">Target stream.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.BeginRead">
<summary>
 Asynchronously returns a reading stream to file.
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.CloudFile">
<summary>
 Represents a file reference bound to specific cloud store instance
</summary>
</member>
<member name="M:Nessos.MBrace.CloudRef.Read``1(Nessos.MBrace.CloudRef{``0})">
 <summary>
     Dereference a Cloud reference.
 </summary>
 <param name="cloudRef">CloudRef to be dereferenced.</param>
</member>
<member name="M:Nessos.MBrace.CloudRef.New``1(``0,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Store.ISerializer})">
 <summary>
     Creates a new cloud reference to the underlying store with provided value.
     Cloud references are immutable and cached locally for performance.
 </summary>
 <param name="value">Cloud reference value.</param>
 <param name="directory">FileStore directory used for cloud ref. Defaults to execution context setting.</param>
 <param name="serializer">Serialization used for object serialization. Defaults to runtime context.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.CloudRef`1.Value">
<summary>
 Synchronously dereferences the cloud ref.
</summary>
</member>
<member name="M:Nessos.MBrace.CloudRef`1.GetValue">
<summary>
 Asynchronously dereferences the cloud ref.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.CloudRef`1">
<summary>
 Represents an immutable reference to an
 object that is persisted in the underlying store.
 Cloud references cached locally for performance.
</summary>
</member>
<member name="M:Nessos.MBrace.CloudSeq.New``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Store.ISerializer})">
 <summary>
     Creates a new cloud sequence with given values in the underlying store.
     Cloud sequences are cached locally for performance.
 </summary>
 <param name="values">Collection to populate the cloud sequence with.</param>
 <param name="directory">FileStore directory used for cloud seq. Defaults to execution context.</param>
 <param name="serializer">Serializer used in sequence serialization. Defaults to execution context.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.CloudSeq`1.Path">
<summary>
 Path to CloudSeq in store
</summary>
</member>
<member name="P:Nessos.MBrace.CloudSeq`1.Length">
<summary>
 Sequence length
</summary>
</member>
<member name="M:Nessos.MBrace.CloudSeq`1.GetSequenceAsync">
<summary>
 Asynchronously fetches the sequence
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.CloudSeq`1">
<summary>
 Represents a finite and immutable sequence of
 elements that is stored in the underlying CloudStore
 and will be enumerated on demand.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.InMemoryRuntime.InMemoryChannelProvider">
<summary>
 Defines an in-memory channel factory using mailbox processor
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.ThreadPool.StartChild``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Provides a context-less Cloud.StartChild implementation
     for execution within the thread pool.
 </summary>
 <param name="computation">Input computation.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds.</param>
</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.ThreadPool.Parallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Provides a context-less Cloud.Parallel implementation
     for execution within the thread pool.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.ThreadPool.Choice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Provides a context-less Cloud.Choice implementation
     for execution within the thread pool.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="T:Nessos.MBrace.InMemoryRuntime.ThreadPool">
<summary>
 Collection of context-less combinators for 
 execution within local thread context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.InMemoryRuntime.SchedulerInternals">

</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.Sequential.StartChild``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Provides a context-less Cloud.StartChild implementation
     for execution within the current thread context.
 </summary>
 <param name="computation">Input computation</param>
</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.Sequential.Choice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Provides a context-less Cloud.Choice implementation
     for execution within the current thread.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.Sequential.Parallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Provides a context-less Cloud.Parallel implementation
     for execution within the current thread.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.InMemoryRuntime.Sequential.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``0}}},``0,System.Collections.Generic.IEnumerable{``1})">
 <summary>
     Provides a context-less sequential fold implementation.
 </summary>
 <param name="folder">Folding function.</param>
 <param name="init">Initial state function.</param>
 <param name="ts">Input sequence.</param>
</member>
<member name="T:Nessos.MBrace.InMemoryRuntime.Sequential">
<summary>
 Collection of context-less combinators for 
 execution within local thread context.
</summary>
</member>
<member name="M:Nessos.MBrace.MapReduce.mapReduce``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.MBrace.Cloud{``1}},``1,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``1}}},``0[])">
 <summary>
     Map/Reduce implementation.
 </summary>
 <param name="mapper">Mapper function</param>
 <param name="id">Result identity element.</param>
 <param name="reducer">Reducer function.</param>
 <param name="inputs">Inputs.</param>
</member>
<member name="M:Nessos.MBrace.MapReduce.parFold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``0}}},``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.MBrace.Cloud{``0}}},``1[])">
 <summary>
     Parallel fold combinator
 </summary>
 <param name="folder">Folding workflow</param>
 <param name="id">Reduction identity element</param>
 <param name="reducer">Reducing function.</param>
 <param name="inputs">Inputs</param>
</member>
<member name="T:Nessos.MBrace.MapReduce">
<summary>
 Collection of mapReduce and related workflows
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.Utils.List.split``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     split list in half
 </summary>
 <param name="xs">input list</param>
</member>
<member name="M:Nessos.MBrace.Utils.List.splitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     split list at given length
 </summary>
 <param name="n">splitting point.</param>
 <param name="xs">input list.</param>
</member>
<member name="T:Nessos.MBrace.Utils.List">

</member>
<member name="M:Nessos.MBrace.Utils.Array.splitByChunkSize``1(System.Int32,``0[])">
 <summary>
     partitions an array into chunks of given size
 </summary>
 <param name="chunkSize">chunk size.</param>
 <param name="ts">Input array.</param>
</member>
<member name="M:Nessos.MBrace.Utils.Array.splitByPartitionCount``1(System.Int32,``0[])">
 <summary>
     partitions an array into a predetermined number of uniformly sized chunks.
 </summary>5 
 <param name="partitions">number of partitions.</param>
 <param name="input">Input array.</param>
</member>
<member name="T:Nessos.MBrace.Utils.Array">

</member>
<member name="T:Nessos.MBrace.Utils">

</member>
</members>
</doc>
